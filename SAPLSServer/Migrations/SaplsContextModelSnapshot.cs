// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SAPLSServer.Models;

#nullable disable

namespace SAPLSServer.Migrations
{
    [DbContext(typeof(SaplsContext))]
    partial class SaplsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SAPLSServer.Models.AdminProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Admin");

                    b.HasKey("UserId")
                        .HasName("PK__AdminPro__1788CC4C7DA9A2EB");

                    b.HasIndex(new[] { "AdminId" }, "IX_AdminProfile_AdminId");

                    b.HasIndex(new[] { "Role" }, "IX_AdminProfile_Role");

                    b.HasIndex(new[] { "UserId" }, "UQ__AdminPro__1788CC4D9EF726F6")
                        .IsUnique();

                    b.HasIndex(new[] { "AdminId" }, "UQ__AdminPro__719FE489908A1F22")
                        .IsUnique();

                    b.ToTable("AdminProfile", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.AttachedFile", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UploadAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Attached__3214EC073061CFA9");

                    b.HasIndex(new[] { "Name" }, "IX_AttachedFile_Name");

                    b.HasIndex(new[] { "UploadAt" }, "IX_AttachedFile_UploadAt");

                    b.HasIndex(new[] { "Id" }, "UQ__Attached__3214EC064F8384D8")
                        .IsUnique();

                    b.ToTable("AttachedFile", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.ClientProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CitizenId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CitizenIdCardImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PlaceOfOrigin")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PlaceOfResidence")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Sex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ShareCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId")
                        .HasName("PK__ClientPr__1788CC4C8C0013CF");

                    b.HasIndex(new[] { "CitizenId" }, "IX_ClientProfile_CitizenId");

                    b.HasIndex(new[] { "ShareCode" }, "IX_ClientProfile_ShareCode");

                    b.HasIndex(new[] { "UserId" }, "UQ__ClientPr__1788CC4D5BBDA1C7")
                        .IsUnique();

                    b.HasIndex(new[] { "ShareCode" }, "UQ__ClientPr__20877041E79C6089")
                        .IsUnique();

                    b.HasIndex(new[] { "CitizenId" }, "UQ__ClientPr__6E49FA0D1DEB3EB6")
                        .IsUnique();

                    b.ToTable("ClientProfile", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.ClientRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id")
                        .HasName("PK__ClientRe__3214EC075E2A0DDC");

                    b.HasIndex(new[] { "SenderId" }, "IX_ClientRequest_SenderId");

                    b.HasIndex(new[] { "Id" }, "UQ__ClientRe__3214EC062F9856E5")
                        .IsUnique();

                    b.ToTable("ClientRequest", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.IncidenceEvidence", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("IncidenceReportId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id")
                        .HasName("PK__Incidenc__3214EC07F31A5873");

                    b.HasIndex("IncidenceReportId");

                    b.HasIndex(new[] { "Id" }, "UQ__Incidenc__3214EC06E432993E")
                        .IsUnique();

                    b.ToTable("IncidenceEvidence", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.IncidenceReport", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Medium");

                    b.Property<DateTime>("ReportedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ReporterId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Open");

                    b.HasKey("Id")
                        .HasName("PK__Incidenc__3214EC073D4C10CA");

                    b.HasIndex(new[] { "Priority" }, "IX_IncidenceReport_Priority");

                    b.HasIndex(new[] { "ReportedDate" }, "IX_IncidenceReport_ReportedDate");

                    b.HasIndex(new[] { "ReporterId" }, "IX_IncidenceReport_ReporterId");

                    b.HasIndex(new[] { "Status" }, "IX_IncidenceReport_Status");

                    b.HasIndex(new[] { "Id" }, "UQ__Incidenc__3214EC06B7457B6E")
                        .IsUnique();

                    b.ToTable("IncidenceReport", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.ParkingFeeSchedule", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<decimal>("AdditionalFee")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<int>("AdditionalMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(60);

                    b.Property<string>("DayOfWeeks")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int>("EndTime")
                        .HasColumnType("int");

                    b.Property<string>("ForVehicleType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Car");

                    b.Property<decimal>("InitialFee")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ParkingLotId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("StartTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__ParkingF__3214EC07ECBF6ECE");

                    b.HasIndex(new[] { "ForVehicleType" }, "IX_ParkingFeeSchedule_ForVehicleType");

                    b.HasIndex(new[] { "IsActive" }, "IX_ParkingFeeSchedule_IsActive");

                    b.HasIndex(new[] { "ParkingLotId" }, "IX_ParkingFeeSchedule_ParkingLotId");

                    b.HasIndex(new[] { "Id" }, "UQ__ParkingF__3214EC06D4A43EC7")
                        .IsUnique();

                    b.ToTable("ParkingFeeSchedule", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.ParkingLot", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ParkingLotOwnerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Active");

                    b.Property<int>("TotalParkingSlot")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__ParkingL__3214EC07C891BE20");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_ParkingLot_CreatedAt");

                    b.HasIndex(new[] { "ParkingLotOwnerId" }, "IX_ParkingLot_ParkingLotOwnerId");

                    b.HasIndex(new[] { "Status" }, "IX_ParkingLot_Status");

                    b.HasIndex(new[] { "Id" }, "UQ__ParkingL__3214EC0632D39888")
                        .IsUnique();

                    b.ToTable("ParkingLot", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.ParkingLotOwnerProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParkingLotOwnerId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId")
                        .HasName("PK__ParkingL__1788CC4CF028C9F5");

                    b.HasIndex(new[] { "ParkingLotOwnerId" }, "IX_ParkingLotOwnerProfile_ParkingLotOwnerId");

                    b.HasIndex(new[] { "UserId" }, "UQ__ParkingL__1788CC4D382048FE")
                        .IsUnique();

                    b.HasIndex(new[] { "ParkingLotOwnerId" }, "UQ__ParkingL__F2333F3FC8F7E68C")
                        .IsUnique();

                    b.ToTable("ParkingLotOwnerProfile", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.ParkingLotOwnerRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id")
                        .HasName("PK__ParkingL__3214EC072A46A363");

                    b.HasIndex(new[] { "SenderId" }, "IX_ParkingLotOwnerRequest_SenderId");

                    b.HasIndex(new[] { "Id" }, "UQ__ParkingL__3214EC06D26B24EA")
                        .IsUnique();

                    b.ToTable("ParkingLotOwnerRequest", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.ParkingSession", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("CheckOutDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("EntryBackCaptureUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EntryDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EntryFrontCaptureUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExitBackCaptureUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("ExitDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("ExitFrontCaptureUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("ParkingLotId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Cash");

                    b.Property<string>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id")
                        .HasName("PK__ParkingS__3214EC07AE20288E");

                    b.HasIndex(new[] { "EntryDateTime" }, "IX_ParkingSession_EntryDateTime");

                    b.HasIndex(new[] { "ExitDateTime" }, "IX_ParkingSession_ExitDateTime");

                    b.HasIndex(new[] { "ParkingLotId" }, "IX_ParkingSession_ParkingLotId");

                    b.HasIndex(new[] { "PaymentMethod" }, "IX_ParkingSession_PaymentMethod");

                    b.HasIndex(new[] { "VehicleId" }, "IX_ParkingSession_VehicleId");

                    b.HasIndex(new[] { "Id" }, "UQ__ParkingS__3214EC06FA15E15F")
                        .IsUnique();

                    b.HasIndex(new[] { "TransactionId" }, "UQ__ParkingS__55433A6AADDA8936")
                        .IsUnique()
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.ToTable("ParkingSession", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.PaymentSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ParkingLotOwnerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__PaymentS__3214EC071D18B705");

                    b.HasIndex(new[] { "ParkingLotOwnerId" }, "IX_PaymentSource_ParkingLotOwnerId");

                    b.HasIndex(new[] { "Id" }, "UQ__PaymentS__3214EC06523096D8")
                        .IsUnique();

                    b.ToTable("PaymentSource", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.Request", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InternalNote")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("LastUpdatePersonId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ResponseMessage")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Open");

                    b.Property<DateTime>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Request__3214EC07B2ACCA82");

                    b.HasIndex(new[] { "LastUpdatePersonId" }, "IX_Request_LastUpdatePersonId");

                    b.HasIndex(new[] { "Status" }, "IX_Request_Status");

                    b.HasIndex(new[] { "SubmittedAt" }, "IX_Request_SubmittedAt");

                    b.HasIndex(new[] { "Id" }, "UQ__Request__3214EC06DDE85BED")
                        .IsUnique();

                    b.ToTable("Request", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.RequestAttachedFile", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id")
                        .HasName("PK__RequestA__3214EC0735467020");

                    b.HasIndex("RequestId");

                    b.HasIndex(new[] { "Id" }, "UQ__RequestA__3214EC06F7DE62C9")
                        .IsUnique();

                    b.ToTable("RequestAttachedFile", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.SharedVehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int?>("AccessDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateOnly?>("ExpirationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateOnly>("InvitationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(CONVERT([date],getdate()))");

                    b.Property<string>("Note")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("SharedPersonId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Available");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id")
                        .HasName("PK__SharedVe__3214EC07EDA49C12");

                    b.HasIndex(new[] { "ExpirationDate" }, "IX_SharedVehicle_ExpirationDate");

                    b.HasIndex(new[] { "InvitationDate" }, "IX_SharedVehicle_InvitationDate");

                    b.HasIndex(new[] { "SharedPersonId" }, "IX_SharedVehicle_SharedPersonId");

                    b.HasIndex(new[] { "Status" }, "IX_SharedVehicle_Status");

                    b.HasIndex(new[] { "VehicleId" }, "IX_SharedVehicle_VehicleId");

                    b.HasIndex(new[] { "Id" }, "UQ__SharedVe__3214EC065D8B45A9")
                        .IsUnique();

                    b.ToTable("SharedVehicle", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.ShiftDiary", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ParkingLotId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id")
                        .HasName("PK__ShiftDia__3214EC07A005ABA7");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_ShiftDiary_CreatedAt");

                    b.HasIndex(new[] { "ParkingLotId" }, "IX_ShiftDiary_ParkingLotId");

                    b.HasIndex(new[] { "SenderId" }, "IX_ShiftDiary_SenderId");

                    b.HasIndex(new[] { "Id" }, "UQ__ShiftDia__3214EC0646F660F8")
                        .IsUnique();

                    b.ToTable("ShiftDiary", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.StaffProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParkingLotId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId")
                        .HasName("PK__StaffPro__1788CC4C08D15458");

                    b.HasIndex(new[] { "ParkingLotId" }, "IX_StaffProfile_ParkingLotId");

                    b.HasIndex(new[] { "StaffId" }, "IX_StaffProfile_StaffId");

                    b.HasIndex(new[] { "UserId" }, "UQ__StaffPro__1788CC4D9769DB66")
                        .IsUnique();

                    b.HasIndex(new[] { "StaffId" }, "UQ__StaffPro__96D4AB16462CCED3")
                        .IsUnique();

                    b.ToTable("StaffProfile", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfileImageUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Inactive");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__User__3214EC07C4FE8F5D");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_User_CreatedAt");

                    b.HasIndex(new[] { "Email" }, "IX_User_Email");

                    b.HasIndex(new[] { "Status" }, "IX_User_Status");

                    b.HasIndex(new[] { "Id" }, "UQ__User__3214EC068BE2D2B3")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "UQ__User__5C7E359E767DDD65")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__User__A9D1053406494FD4")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("OwnerVehicleFullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SharingStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unavailable");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Inactive");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("VehicleRegistrationCertificateUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id")
                        .HasName("PK__Vehicle__3214EC07EBABF790");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_Vehicle_CreatedAt");

                    b.HasIndex(new[] { "LicensePlate" }, "IX_Vehicle_LicensePlate");

                    b.HasIndex(new[] { "OwnerId" }, "IX_Vehicle_OwnerId");

                    b.HasIndex(new[] { "SharingStatus" }, "IX_Vehicle_SharingStatus");

                    b.HasIndex(new[] { "Status" }, "IX_Vehicle_Status");

                    b.HasIndex(new[] { "LicensePlate" }, "UQ__Vehicle__026BC15C3384BD24")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "UQ__Vehicle__3214EC06A9DEC9F7")
                        .IsUnique();

                    b.ToTable("Vehicle", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.WhiteList", b =>
                {
                    b.Property<string>("ParkingLotId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateOnly>("AddedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(CONVERT([date],getdate()))");

                    b.Property<DateOnly?>("ExpiredDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("ParkingLotId", "ClientId")
                        .HasName("PK__WhiteLis__3140FF2BC4A11819");

                    b.HasIndex(new[] { "AddedDate" }, "IX_WhiteList_AddedDate");

                    b.HasIndex(new[] { "ClientId" }, "IX_WhiteList_ClientId");

                    b.HasIndex(new[] { "ExpiredDate" }, "IX_WhiteList_ExpiredDate");

                    b.ToTable("WhiteList", (string)null);
                });

            modelBuilder.Entity("SAPLSServer.Models.AdminProfile", b =>
                {
                    b.HasOne("SAPLSServer.Models.User", "User")
                        .WithOne("AdminProfile")
                        .HasForeignKey("SAPLSServer.Models.AdminProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("AdminProfile_fk0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAPLSServer.Models.ClientProfile", b =>
                {
                    b.HasOne("SAPLSServer.Models.User", "User")
                        .WithOne("ClientProfile")
                        .HasForeignKey("SAPLSServer.Models.ClientProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ClientProfile_fk0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAPLSServer.Models.ClientRequest", b =>
                {
                    b.HasOne("SAPLSServer.Models.Request", "IdNavigation")
                        .WithOne("ClientRequest")
                        .HasForeignKey("SAPLSServer.Models.ClientRequest", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ClientRequest_fk0");

                    b.HasOne("SAPLSServer.Models.ClientProfile", "Sender")
                        .WithMany("ClientRequests")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("ClientRequest_fk1");

                    b.Navigation("IdNavigation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SAPLSServer.Models.IncidenceEvidence", b =>
                {
                    b.HasOne("SAPLSServer.Models.AttachedFile", "IdNavigation")
                        .WithOne("IncidenceEvidence")
                        .HasForeignKey("SAPLSServer.Models.IncidenceEvidence", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("IncidenceEvidence_fk0");

                    b.HasOne("SAPLSServer.Models.IncidenceReport", "IncidenceReport")
                        .WithMany("IncidenceEvidences")
                        .HasForeignKey("IncidenceReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("IncidenceEvidence_fk1");

                    b.Navigation("IdNavigation");

                    b.Navigation("IncidenceReport");
                });

            modelBuilder.Entity("SAPLSServer.Models.IncidenceReport", b =>
                {
                    b.HasOne("SAPLSServer.Models.StaffProfile", "Reporter")
                        .WithMany("IncidenceReports")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("IncidenceReport_fk6");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("SAPLSServer.Models.ParkingFeeSchedule", b =>
                {
                    b.HasOne("SAPLSServer.Models.ParkingLot", "ParkingLot")
                        .WithMany("ParkingFeeSchedules")
                        .HasForeignKey("ParkingLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ParkingFeeSchedule_fk10");

                    b.Navigation("ParkingLot");
                });

            modelBuilder.Entity("SAPLSServer.Models.ParkingLot", b =>
                {
                    b.HasOne("SAPLSServer.Models.ParkingLotOwnerProfile", "ParkingLotOwner")
                        .WithMany("ParkingLots")
                        .HasForeignKey("ParkingLotOwnerId")
                        .IsRequired()
                        .HasConstraintName("ParkingLot_fk8");

                    b.Navigation("ParkingLotOwner");
                });

            modelBuilder.Entity("SAPLSServer.Models.ParkingLotOwnerProfile", b =>
                {
                    b.HasOne("SAPLSServer.Models.User", "User")
                        .WithOne("ParkingLotOwnerProfile")
                        .HasForeignKey("SAPLSServer.Models.ParkingLotOwnerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ParkingLotOwnerProfile_fk0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAPLSServer.Models.ParkingLotOwnerRequest", b =>
                {
                    b.HasOne("SAPLSServer.Models.Request", "IdNavigation")
                        .WithOne("ParkingLotOwnerRequest")
                        .HasForeignKey("SAPLSServer.Models.ParkingLotOwnerRequest", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ParkingLotOwnerRequest_fk0");

                    b.HasOne("SAPLSServer.Models.ParkingLotOwnerProfile", "Sender")
                        .WithMany("ParkingLotOwnerRequests")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("ParkingLotOwnerRequest_fk1");

                    b.Navigation("IdNavigation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SAPLSServer.Models.ParkingSession", b =>
                {
                    b.HasOne("SAPLSServer.Models.ParkingLot", "ParkingLot")
                        .WithMany("ParkingSessions")
                        .HasForeignKey("ParkingLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ParkingSession_fk2");

                    b.HasOne("SAPLSServer.Models.Vehicle", "Vehicle")
                        .WithMany("ParkingSessions")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ParkingSession_fk1");

                    b.Navigation("ParkingLot");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SAPLSServer.Models.PaymentSource", b =>
                {
                    b.HasOne("SAPLSServer.Models.ParkingLotOwnerProfile", "ParkingLotOwner")
                        .WithMany("PaymentSources")
                        .HasForeignKey("ParkingLotOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PaymentSource_fk5");

                    b.Navigation("ParkingLotOwner");
                });

            modelBuilder.Entity("SAPLSServer.Models.Request", b =>
                {
                    b.HasOne("SAPLSServer.Models.AdminProfile", "LastUpdatePerson")
                        .WithMany("Requests")
                        .HasForeignKey("LastUpdatePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Request_fk8");

                    b.Navigation("LastUpdatePerson");
                });

            modelBuilder.Entity("SAPLSServer.Models.RequestAttachedFile", b =>
                {
                    b.HasOne("SAPLSServer.Models.AttachedFile", "IdNavigation")
                        .WithOne("RequestAttachedFile")
                        .HasForeignKey("SAPLSServer.Models.RequestAttachedFile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RequestAttachedFile_fk0");

                    b.HasOne("SAPLSServer.Models.Request", "Request")
                        .WithMany("RequestAttachedFiles")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RequestAttachedFile_fk1");

                    b.Navigation("IdNavigation");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SAPLSServer.Models.SharedVehicle", b =>
                {
                    b.HasOne("SAPLSServer.Models.ClientProfile", "SharedPerson")
                        .WithMany("SharedVehicles")
                        .HasForeignKey("SharedPersonId")
                        .IsRequired()
                        .HasConstraintName("SharedVehicle_fk7");

                    b.HasOne("SAPLSServer.Models.Vehicle", "Vehicle")
                        .WithMany("SharedVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("SharedVehicle_fk1");

                    b.Navigation("SharedPerson");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SAPLSServer.Models.ShiftDiary", b =>
                {
                    b.HasOne("SAPLSServer.Models.ParkingLot", "ParkingLot")
                        .WithMany("ShiftDiaries")
                        .HasForeignKey("ParkingLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ShiftDiary_fk4");

                    b.HasOne("SAPLSServer.Models.StaffProfile", "Sender")
                        .WithMany("ShiftDiaries")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("ShiftDiary_fk5");

                    b.Navigation("ParkingLot");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SAPLSServer.Models.StaffProfile", b =>
                {
                    b.HasOne("SAPLSServer.Models.ParkingLot", "ParkingLot")
                        .WithMany("StaffProfiles")
                        .HasForeignKey("ParkingLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("StaffProfile_fk2");

                    b.HasOne("SAPLSServer.Models.User", "User")
                        .WithOne("StaffProfile")
                        .HasForeignKey("SAPLSServer.Models.StaffProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("StaffProfile_fk0");

                    b.Navigation("ParkingLot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAPLSServer.Models.Vehicle", b =>
                {
                    b.HasOne("SAPLSServer.Models.ClientProfile", "Owner")
                        .WithMany("Vehicles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Vehicle_fk12");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SAPLSServer.Models.WhiteList", b =>
                {
                    b.HasOne("SAPLSServer.Models.ClientProfile", "Client")
                        .WithMany("WhiteLists")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("WhiteList_fk1");

                    b.HasOne("SAPLSServer.Models.ParkingLot", "ParkingLot")
                        .WithMany("WhiteLists")
                        .HasForeignKey("ParkingLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("WhiteList_fk0");

                    b.Navigation("Client");

                    b.Navigation("ParkingLot");
                });

            modelBuilder.Entity("SAPLSServer.Models.AdminProfile", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("SAPLSServer.Models.AttachedFile", b =>
                {
                    b.Navigation("IncidenceEvidence");

                    b.Navigation("RequestAttachedFile");
                });

            modelBuilder.Entity("SAPLSServer.Models.ClientProfile", b =>
                {
                    b.Navigation("ClientRequests");

                    b.Navigation("SharedVehicles");

                    b.Navigation("Vehicles");

                    b.Navigation("WhiteLists");
                });

            modelBuilder.Entity("SAPLSServer.Models.IncidenceReport", b =>
                {
                    b.Navigation("IncidenceEvidences");
                });

            modelBuilder.Entity("SAPLSServer.Models.ParkingLot", b =>
                {
                    b.Navigation("ParkingFeeSchedules");

                    b.Navigation("ParkingSessions");

                    b.Navigation("ShiftDiaries");

                    b.Navigation("StaffProfiles");

                    b.Navigation("WhiteLists");
                });

            modelBuilder.Entity("SAPLSServer.Models.ParkingLotOwnerProfile", b =>
                {
                    b.Navigation("ParkingLotOwnerRequests");

                    b.Navigation("ParkingLots");

                    b.Navigation("PaymentSources");
                });

            modelBuilder.Entity("SAPLSServer.Models.Request", b =>
                {
                    b.Navigation("ClientRequest");

                    b.Navigation("ParkingLotOwnerRequest");

                    b.Navigation("RequestAttachedFiles");
                });

            modelBuilder.Entity("SAPLSServer.Models.StaffProfile", b =>
                {
                    b.Navigation("IncidenceReports");

                    b.Navigation("ShiftDiaries");
                });

            modelBuilder.Entity("SAPLSServer.Models.User", b =>
                {
                    b.Navigation("AdminProfile");

                    b.Navigation("ClientProfile");

                    b.Navigation("ParkingLotOwnerProfile");

                    b.Navigation("StaffProfile");
                });

            modelBuilder.Entity("SAPLSServer.Models.Vehicle", b =>
                {
                    b.Navigation("ParkingSessions");

                    b.Navigation("SharedVehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
